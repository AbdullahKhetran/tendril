from groq_utils import generate_affirmation
from streak_logic import update_streak
from forum import Forum

if __name__ == '__main__':
    # Test Groq API
    print("Affirmation:", generate_affirmation())

    # Test Streak Update
    user = {'last_completed_date': '2025-07-25', 'streak': 3, 'paused': False}
    updated = update_streak(user)
    print("Updated Streak:", updated)

    # Test Forum
    forum = Forum()
    forum.submit_post("I feel so lazy sometimes...")
    forum.add_comment(0, "Try breaking it down!")
    forum.star_post(0)
    forum.bookmark_post(0)
    print("Forum Posts:", forum.get_all_posts())
from flask import Flask, request, jsonify
import os
import json
from datetime import datetime, timedelta
from groq import Groq
# tendril_backend/app.py
from flask import Flask, request, jsonify
from flask_cors import CORS
from datetime import datetime, timedelta
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Base, User, Task
from forum import forum_instance
from groq_utils import generate_affirmation

app = Flask(__name__)
CORS(app)

# Database setup
engine = create_engine('sqlite:///database.db')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

@app.route("/user/<username>")
def get_user(username):
    session = Session()
    user = session.query(User).filter_by(username=username).first()
    if not user:
        user = User(username=username, last_completed_date=None, streak=0, paused=False)
        session.add(user)
        session.commit()
    return jsonify({
        "username": user.username,
        "last_completed_date": str(user.last_completed_date),
        "streak": user.streak,
        "paused": user.paused
    })

@app.route("/user/<username>/streak")
def update_streak(username):
    session = Session()
    user = session.query(User).filter_by(username=username).first()
    today = datetime.today().date()
    yesterday = today - timedelta(days=1)

    if user.last_completed_date == today:
        pass
    elif user.last_completed_date == yesterday:
        user.streak += 1
        user.paused = False
    else:
        user.paused = True

    user.last_completed_date = today
    session.commit()
    return jsonify({"streak": user.streak, "paused": user.paused})

@app.route("/tasks/<username>", methods=["GET", "POST"])
def handle_tasks(username):
    session = Session()
    if request.method == "POST":
        data = request.json
        task = Task(username=username, description=data["description"], completed=False)
        session.add(task)
        session.commit()
        return jsonify({"status": "created"})
    else:
        tasks = session.query(Task).filter_by(username=username).all()
        return jsonify([
            {"id": t.id, "description": t.description, "completed": t.completed}
            for t in tasks
        ])

@app.route("/forum/posts", methods=["GET", "POST"])
def handle_forum():
    if request.method == "POST":
        data = request.json
        post = forum_instance.submit_post(data["content"])
        return jsonify(post)
    else:
        return jsonify(forum_instance.get_all_posts())

@app.route("/affirmation")
def get_affirmation():
    return jsonify({"affirmation": generate_affirmation()})

if __name__ == "__main__":
    app.run(debug=True)

from forum import Forum, sanitize_text
from streak_logic import update_streak
from groq_utils import generate_affirmation

app = Flask(__name__)

data_store = {
    "users": {},
    "tasks": {},
}

forum = Forum()

# Load and Save JSON logic
def save_data():
    with open("data.json", "w") as f:
        json.dump(data_store, f, indent=2)

def load_data():
    global data_store
    try:
        with open("data.json", "r") as f:
            data_store = json.load(f)
    except FileNotFoundError:
        pass

load_data()

@app.route("/user/<username>", methods=["GET"])
def get_user(username):
    user = data_store["users"].get(username)
    if not user:
        # Create user if not exists
        data_store["users"][username] = {
            "last_completed_date": str(datetime.today().date()),
            "streak": 0,
            "paused": False
        }
        user = data_store["users"][username]
        save_data()
    return jsonify(user)

@app.route("/user/<username>/streak", methods=["GET"])
def user_streak(username):
    user = data_store["users"].get(username)
    if not user:
        return jsonify({"error": "User not found"}), 404
    updated = update_streak(user)
    data_store["users"][username] = updated
    save_data()
    return jsonify(updated)

@app.route("/tasks/<username>", methods=["GET"])
def get_tasks(username):
    return jsonify(data_store["tasks"].get(username, []))

@app.route("/tasks/<username>", methods=["POST"])
def create_task(username):
    task = request.json.get("task")
    status = request.json.get("status", "incomplete")
    if username not in data_store["tasks"]:
        data_store["tasks"][username] = []
    data_store["tasks"][username].append({"task": task, "status": status})
    save_data()
    return jsonify({"message": "Task added"})

@app.route("/forum/posts", methods=["GET"])
def get_forum_posts():
    return jsonify(forum.get_all_posts())

@app.route("/forum/posts", methods=["POST"])
def submit_forum_post():
    content = request.json.get("content")
    if not content:
        return jsonify({"error": "Post content required"}), 400
    post = forum.submit_post(content)
    return jsonify(post)

@app.route("/affirmation", methods=["GET"])
def get_affirmation():
    try:
        affirmation = generate_affirmation()
        return jsonify({"affirmation": affirmation})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
# tendril_backend/app.py
from flask import Flask, request, jsonify
from flask_cors import CORS
from datetime import datetime, timedelta
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Base, User, Task
from forum import forum_instance
from groq_utils import generate_affirmation

app = Flask(__name__)
CORS(app)

# Database setup
engine = create_engine('sqlite:///database.db')
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

@app.route("/user/<username>")
def get_user(username):
    session = Session()
    user = session.query(User).filter_by(username=username).first()
    if not user:
        user = User(username=username, last_completed_date=None, streak=0, paused=False)
        session.add(user)
        session.commit()
    return jsonify({
        "username": user.username,
        "last_completed_date": str(user.last_completed_date),
        "streak": user.streak,
        "paused": user.paused
    })

@app.route("/user/<username>/streak")
def update_streak(username):
    session = Session()
    user = session.query(User).filter_by(username=username).first()
    today = datetime.today().date()
    yesterday = today - timedelta(days=1)

    if user.last_completed_date == today:
        pass
    elif user.last_completed_date == yesterday:
        user.streak += 1
        user.paused = False
    else:
        user.paused = True

    user.last_completed_date = today
    session.commit()
    return jsonify({"streak": user.streak, "paused": user.paused})

@app.route("/tasks/<username>", methods=["GET", "POST"])
def handle_tasks(username):
    session = Session()
    if request.method == "POST":
        data = request.json
        task = Task(username=username, description=data["description"], completed=False)
        session.add(task)
        session.commit()
        return jsonify({"status": "created"})
    else:
        tasks = session.query(Task).filter_by(username=username).all()
        return jsonify([
            {"id": t.id, "description": t.description, "completed": t.completed}
            for t in tasks
        ])

@app.route("/forum/posts", methods=["GET", "POST"])
def handle_forum():
    if request.method == "POST":
        data = request.json
        post = forum_instance.submit_post(data["content"])
        return jsonify(post)
    else:
        return jsonify(forum_instance.get_all_posts())

@app.route("/affirmation")
def get_affirmation():
    return jsonify({"affirmation": generate_affirmation()})

if __name__ == "__main__":
    app.run(debug=True)
